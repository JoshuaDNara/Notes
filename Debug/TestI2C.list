
TestI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003db8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f84  08003f84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f84  08003f84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f84  08003f84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003f98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003f98  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001714  00000000  00000000  0002c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000930  00000000  00000000  0002db08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000898  00000000  00000000  0002e438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e950  00000000  00000000  0002ecd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000092f0  00000000  00000000  0004d620  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b64ed  00000000  00000000  00056910  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010cdfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a4  00000000  00000000  0010ce78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f28 	.word	0x08003f28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f28 	.word	0x08003f28

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	0000      	movs	r0, r0
	...

08000a08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b091      	sub	sp, #68	; 0x44
 8000a0c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a0e:	f000 fba7 	bl	8001160 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a12:	f000 f93b 	bl	8000c8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a16:	f000 fa03 	bl	8000e20 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000a1a:	f000 f9d1 	bl	8000dc0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000a1e:	f000 f98f 	bl	8000d40 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	uint16_t val;
	uint8_t pData[10] = { '1', '9', '8', '6', '2', '2', '4', '5', ':', '\n' };
 8000a22:	4a8f      	ldr	r2, [pc, #572]	; (8000c60 <main+0x258>)
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a2a:	c303      	stmia	r3!, {r0, r1}
 8000a2c:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, pData, 10, 100);
 8000a2e:	f107 0114 	add.w	r1, r7, #20
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	220a      	movs	r2, #10
 8000a36:	488b      	ldr	r0, [pc, #556]	; (8000c64 <main+0x25c>)
 8000a38:	f002 fece 	bl	80037d8 <HAL_UART_Transmit>

	uint16_t value = 0x8000;
 8000a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a40:	827b      	strh	r3, [r7, #18]
	uint8_t write[2];
	uint8_t temp;
	memcpy(write, &value, 2);
 8000a42:	8a7b      	ldrh	r3, [r7, #18]
 8000a44:	823b      	strh	r3, [r7, #16]
	temp = write[0];
 8000a46:	7c3b      	ldrb	r3, [r7, #16]
 8000a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	write[0] = write[1];
 8000a4c:	7c7b      	ldrb	r3, [r7, #17]
 8000a4e:	743b      	strb	r3, [r7, #16]
	write[1] = temp;
 8000a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a54:	747b      	strb	r3, [r7, #17]

	HAL_StatusTypeDef a = HAL_I2C_Mem_Write(&hi2c1, 0x40 << 1, 0x05, 1, write,
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	9302      	str	r3, [sp, #8]
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2301      	movs	r3, #1
 8000a66:	2205      	movs	r2, #5
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	487f      	ldr	r0, [pc, #508]	; (8000c68 <main+0x260>)
 8000a6c:	f000 ff00 	bl	8001870 <HAL_I2C_Mem_Write>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			2, 100);

	uint16_t receive;
	uint8_t data[2];
	HAL_StatusTypeDef b = HAL_I2C_Mem_Read(&hi2c1, 0x40 << 1, 0x05, 1, data, 2,
 8000a76:	2364      	movs	r3, #100	; 0x64
 8000a78:	9302      	str	r3, [sp, #8]
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2301      	movs	r3, #1
 8000a86:	2205      	movs	r2, #5
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	4877      	ldr	r0, [pc, #476]	; (8000c68 <main+0x260>)
 8000a8c:	f001 f804 	bl	8001a98 <HAL_I2C_Mem_Read>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			100);
	receive = ((uint16_t) (data[0]) << 8) | data[1];
 8000a96:	7b3b      	ldrb	r3, [r7, #12]
 8000a98:	021b      	lsls	r3, r3, #8
 8000a9a:	b21a      	sxth	r2, r3
 8000a9c:	7b7b      	ldrb	r3, [r7, #13]
 8000a9e:	b21b      	sxth	r3, r3
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t config = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	817b      	strh	r3, [r7, #10]
	config |= 0b101;// Set mode to shunt voltage and continuous
 8000aaa:	897b      	ldrh	r3, [r7, #10]
 8000aac:	f043 0305 	orr.w	r3, r3, #5
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	817b      	strh	r3, [r7, #10]
	config |= 0b1000 << 3;// Set the shunt ADC resolution to 12 bit
 8000ab4:	897b      	ldrh	r3, [r7, #10]
 8000ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	817b      	strh	r3, [r7, #10]
	memcpy(write, &config, 2);
 8000abe:	897b      	ldrh	r3, [r7, #10]
 8000ac0:	823b      	strh	r3, [r7, #16]
	temp = write[0];
 8000ac2:	7c3b      	ldrb	r3, [r7, #16]
 8000ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	write[0] = write[1];
 8000ac8:	7c7b      	ldrb	r3, [r7, #17]
 8000aca:	743b      	strb	r3, [r7, #16]
	write[1] = temp;
 8000acc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ad0:	747b      	strb	r3, [r7, #17]

	 a = HAL_I2C_Mem_Write(&hi2c1, 0x40 << 1, 0x00, 1, write,
 8000ad2:	2364      	movs	r3, #100	; 0x64
 8000ad4:	9302      	str	r3, [sp, #8]
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	4860      	ldr	r0, [pc, #384]	; (8000c68 <main+0x260>)
 8000ae8:	f000 fec2 	bl	8001870 <HAL_I2C_Mem_Write>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			2, 100);
	 b = HAL_I2C_Mem_Read(&hi2c1, 0x40 << 1, 0x00, 1, data, 2,
 8000af2:	2364      	movs	r3, #100	; 0x64
 8000af4:	9302      	str	r3, [sp, #8]
 8000af6:	2302      	movs	r3, #2
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2301      	movs	r3, #1
 8000b02:	2200      	movs	r2, #0
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	4858      	ldr	r0, [pc, #352]	; (8000c68 <main+0x260>)
 8000b08:	f000 ffc6 	bl	8001a98 <HAL_I2C_Mem_Read>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			100);
	receive = ((uint16_t) (data[0]) << 8) | data[1];
 8000b12:	7b3b      	ldrb	r3, [r7, #12]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	7b7b      	ldrb	r3, [r7, #13]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	857b      	strh	r3, [r7, #42]	; 0x2a



	uint16_t stop = 20;
 8000b22:	2314      	movs	r3, #20
 8000b24:	853b      	strh	r3, [r7, #40]	; 0x28

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		HAL_StatusTypeDef b = HAL_I2C_Mem_Read(&hi2c1, 0x40 << 1, 0x04, 1, data,
 8000b26:	2364      	movs	r3, #100	; 0x64
 8000b28:	9302      	str	r3, [sp, #8]
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	9301      	str	r3, [sp, #4]
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2301      	movs	r3, #1
 8000b36:	2204      	movs	r2, #4
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	484b      	ldr	r0, [pc, #300]	; (8000c68 <main+0x260>)
 8000b3c:	f000 ffac 	bl	8001a98 <HAL_I2C_Mem_Read>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				2, 100);
		receive = (uint16_t) (data[0]) << 8 | data[1];
 8000b46:	7b3b      	ldrb	r3, [r7, #12]
 8000b48:	021b      	lsls	r3, r3, #8
 8000b4a:	b21a      	sxth	r2, r3
 8000b4c:	7b7b      	ldrb	r3, [r7, #13]
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint8_t transmit[6];
		transmit[0]=receive%10 + 48;
 8000b56:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000b58:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <main+0x264>)
 8000b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b5e:	08d9      	lsrs	r1, r3, #3
 8000b60:	460b      	mov	r3, r1
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	440b      	add	r3, r1
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	3330      	adds	r3, #48	; 0x30
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	713b      	strb	r3, [r7, #4]
		float current = ( 12.5e-6 * receive) * 1000.0f;
 8000b74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fc78 	bl	800046c <__aeabi_i2d>
 8000b7c:	a336      	add	r3, pc, #216	; (adr r3, 8000c58 <main+0x250>)
 8000b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b82:	f7ff fcdd 	bl	8000540 <__aeabi_dmul>
 8000b86:	4603      	mov	r3, r0
 8000b88:	460c      	mov	r4, r1
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	4621      	mov	r1, r4
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	4b37      	ldr	r3, [pc, #220]	; (8000c70 <main+0x268>)
 8000b94:	f7ff fcd4 	bl	8000540 <__aeabi_dmul>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	4621      	mov	r1, r4
 8000ba0:	f7ff fee0 	bl	8000964 <__aeabi_d2f>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	623b      	str	r3, [r7, #32]
		transmit[1]=(receive%100)/10 + 48;
 8000ba8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000baa:	4a32      	ldr	r2, [pc, #200]	; (8000c74 <main+0x26c>)
 8000bac:	fba2 1203 	umull	r1, r2, r2, r3
 8000bb0:	0952      	lsrs	r2, r2, #5
 8000bb2:	2164      	movs	r1, #100	; 0x64
 8000bb4:	fb01 f202 	mul.w	r2, r1, r2
 8000bb8:	1a9b      	subs	r3, r3, r2
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4a2b      	ldr	r2, [pc, #172]	; (8000c6c <main+0x264>)
 8000bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc2:	08db      	lsrs	r3, r3, #3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	3330      	adds	r3, #48	; 0x30
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	717b      	strb	r3, [r7, #5]
		transmit[2]=(receive%1000)/100 + 48;
 8000bce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bd0:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <main+0x270>)
 8000bd2:	fba2 1203 	umull	r1, r2, r2, r3
 8000bd6:	0992      	lsrs	r2, r2, #6
 8000bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bdc:	fb01 f202 	mul.w	r2, r1, r2
 8000be0:	1a9b      	subs	r3, r3, r2
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <main+0x26c>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	3330      	adds	r3, #48	; 0x30
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	71bb      	strb	r3, [r7, #6]
		transmit[3]=(receive%10000)/1000 + 48;
 8000bf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bf8:	4a20      	ldr	r2, [pc, #128]	; (8000c7c <main+0x274>)
 8000bfa:	fba2 1203 	umull	r1, r2, r2, r3
 8000bfe:	0b52      	lsrs	r2, r2, #13
 8000c00:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c04:	fb01 f202 	mul.w	r2, r1, r2
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4a1a      	ldr	r2, [pc, #104]	; (8000c78 <main+0x270>)
 8000c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c12:	099b      	lsrs	r3, r3, #6
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	3330      	adds	r3, #48	; 0x30
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	71fb      	strb	r3, [r7, #7]
		transmit[4]=(receive%100000)/10000 + 48;
 8000c1e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <main+0x278>)
 8000c22:	fb83 1302 	smull	r1, r3, r3, r2
 8000c26:	1359      	asrs	r1, r3, #13
 8000c28:	17d3      	asrs	r3, r2, #31
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	4915      	ldr	r1, [pc, #84]	; (8000c84 <main+0x27c>)
 8000c2e:	fb01 f303 	mul.w	r3, r1, r3
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <main+0x280>)
 8000c36:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3a:	1312      	asrs	r2, r2, #12
 8000c3c:	17db      	asrs	r3, r3, #31
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	3330      	adds	r3, #48	; 0x30
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	723b      	strb	r3, [r7, #8]
		transmit[5]='\n';
 8000c48:	230a      	movs	r3, #10
 8000c4a:	727b      	strb	r3, [r7, #9]
		//HAL_UART_Transmit(&huart2, transmit, 6, 100);
		HAL_Delay(100);
 8000c4c:	2064      	movs	r0, #100	; 0x64
 8000c4e:	f000 faed 	bl	800122c <HAL_Delay>
	while (1) {
 8000c52:	e768      	b.n	8000b26 <main+0x11e>
 8000c54:	f3af 8000 	nop.w
 8000c58:	eb1c432d 	.word	0xeb1c432d
 8000c5c:	3eea36e2 	.word	0x3eea36e2
 8000c60:	08003f40 	.word	0x08003f40
 8000c64:	20000074 	.word	0x20000074
 8000c68:	20000028 	.word	0x20000028
 8000c6c:	cccccccd 	.word	0xcccccccd
 8000c70:	408f4000 	.word	0x408f4000
 8000c74:	51eb851f 	.word	0x51eb851f
 8000c78:	10624dd3 	.word	0x10624dd3
 8000c7c:	d1b71759 	.word	0xd1b71759
 8000c80:	14f8b589 	.word	0x14f8b589
 8000c84:	000186a0 	.word	0x000186a0
 8000c88:	68db8bad 	.word	0x68db8bad

08000c8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b096      	sub	sp, #88	; 0x58
 8000c90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c96:	2228      	movs	r2, #40	; 0x28
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 f93c 	bl	8003f18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cd6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000cda:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 fab7 	bl	8002254 <HAL_RCC_OscConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0x64>
		Error_Handler();
 8000cec:	f000 f8fe 	bl	8000eec <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 f9a9 	bl	8003064 <HAL_RCC_ClockConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x90>
		Error_Handler();
 8000d18:	f000 f8e8 	bl	8000eec <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d1c:	2320      	movs	r3, #32
 8000d1e:	603b      	str	r3, [r7, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000d24:	463b      	mov	r3, r7
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 fbd2 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0xaa>
		Error_Handler();
 8000d32:	f000 f8db 	bl	8000eec <Error_Handler>
	}
}
 8000d36:	bf00      	nop
 8000d38:	3758      	adds	r7, #88	; 0x58
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <MX_I2C1_Init+0x78>)
 8000d48:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <MX_I2C1_Init+0x7c>)
 8000d4e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d7c:	f000 fce8 	bl	8001750 <HAL_I2C_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000d86:	f000 f8b1 	bl	8000eec <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000d8e:	f001 f9c9 	bl	8002124 <HAL_I2CEx_ConfigAnalogFilter>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000d98:	f000 f8a8 	bl	8000eec <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_I2C1_Init+0x74>)
 8000da0:	f001 fa0b 	bl	80021ba <HAL_I2CEx_ConfigDigitalFilter>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000daa:	f000 f89f 	bl	8000eec <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000028 	.word	0x20000028
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	2000090e 	.word	0x2000090e

08000dc0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_USART2_UART_Init+0x58>)
 8000dc6:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <MX_USART2_UART_Init+0x5c>)
 8000dc8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_USART2_UART_Init+0x58>)
 8000dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_USART2_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_USART2_UART_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_USART2_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_USART2_UART_Init+0x58>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_USART2_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_USART2_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_USART2_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_USART2_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_USART2_UART_Init+0x58>)
 8000e04:	f002 fc9a 	bl	800373c <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000e0e:	f000 f86d 	bl	8000eec <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000074 	.word	0x20000074
 8000e1c:	40004400 	.word	0x40004400

08000e20 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <MX_GPIO_Init+0xc4>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ee4 <MX_GPIO_Init+0xc4>)
 8000e3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <MX_GPIO_Init+0xc4>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <MX_GPIO_Init+0xc4>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a24      	ldr	r2, [pc, #144]	; (8000ee4 <MX_GPIO_Init+0xc4>)
 8000e54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <MX_GPIO_Init+0xc4>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_GPIO_Init+0xc4>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <MX_GPIO_Init+0xc4>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_GPIO_Init+0xc4>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_GPIO_Init+0xc4>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <MX_GPIO_Init+0xc4>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_GPIO_Init+0xc4>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9e:	f000 fc3f 	bl	8001720 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ea8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <MX_GPIO_Init+0xc8>)
 8000eba:	f000 fabf 	bl	800143c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000ebe:	2320      	movs	r3, #32
 8000ec0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed8:	f000 fab0 	bl	800143c <HAL_GPIO_Init>

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48000800 	.word	0x48000800

08000eec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_MspInit+0x44>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_MspInit+0x44>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6193      	str	r3, [r2, #24]
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_MspInit+0x44>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_MspInit+0x44>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <HAL_MspInit+0x44>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	61d3      	str	r3, [r2, #28]
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_MspInit+0x44>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f32:	2007      	movs	r0, #7
 8000f34:	f000 fa4e 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a26      	ldr	r2, [pc, #152]	; (8000ffc <HAL_I2C_MspInit+0xb8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d145      	bne.n	8000ff2 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_I2C_MspInit+0xbc>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4a25      	ldr	r2, [pc, #148]	; (8001000 <HAL_I2C_MspInit+0xbc>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	6153      	str	r3, [r2, #20]
 8000f72:	4b23      	ldr	r3, [pc, #140]	; (8001000 <HAL_I2C_MspInit+0xbc>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b20      	ldr	r3, [pc, #128]	; (8001000 <HAL_I2C_MspInit+0xbc>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <HAL_I2C_MspInit+0xbc>)
 8000f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f88:	6153      	str	r3, [r2, #20]
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_I2C_MspInit+0xbc>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb6:	f000 fa41 	bl	800143c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbe:	2312      	movs	r3, #18
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <HAL_I2C_MspInit+0xc0>)
 8000fd6:	f000 fa31 	bl	800143c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <HAL_I2C_MspInit+0xbc>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a08      	ldr	r2, [pc, #32]	; (8001000 <HAL_I2C_MspInit+0xbc>)
 8000fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_I2C_MspInit+0xbc>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40005400 	.word	0x40005400
 8001000:	40021000 	.word	0x40021000
 8001004:	48000400 	.word	0x48000400

08001008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a17      	ldr	r2, [pc, #92]	; (8001084 <HAL_UART_MspInit+0x7c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d128      	bne.n	800107c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_UART_MspInit+0x80>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a16      	ldr	r2, [pc, #88]	; (8001088 <HAL_UART_MspInit+0x80>)
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_UART_MspInit+0x80>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_UART_MspInit+0x80>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_UART_MspInit+0x80>)
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_UART_MspInit+0x80>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800105a:	230c      	movs	r3, #12
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106a:	2307      	movs	r3, #7
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f000 f9e0 	bl	800143c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	; 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40004400 	.word	0x40004400
 8001088:	40021000 	.word	0x40021000

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f884 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490e      	ldr	r1, [pc, #56]	; (800114c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0b      	ldr	r4, [pc, #44]	; (8001158 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001136:	f7ff ffd7 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f002 fec9 	bl	8003ed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113e:	f7ff fc63 	bl	8000a08 <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001144:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001150:	08003f8c 	.word	0x08003f8c
  ldr r2, =_sbss
 8001154:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001158:	200000fc 	.word	0x200000fc

0800115c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_2_IRQHandler>
	...

08001160 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_Init+0x28>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_Init+0x28>)
 800116a:	f043 0310 	orr.w	r3, r3, #16
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 f92f 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f808 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff febe 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40022000 	.word	0x40022000

0800118c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x54>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x58>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f939 	bl	8001422 <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00e      	b.n	80011d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d80a      	bhi.n	80011d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f000 f90f 	bl	80013ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <HAL_InitTick+0x5c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000004 	.word	0x20000004

080011ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	200000f8 	.word	0x200000f8

08001214 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;  
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	200000f8 	.word	0x200000f8

0800122c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff ffee 	bl	8001214 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_Delay+0x40>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffde 	bl	8001214 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000008 	.word	0x20000008

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff8e 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff47 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff5c 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff8e 	bl	8001328 <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5d 	bl	80012d4 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffb0 	bl	8001390 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	e14e      	b.n	80016ea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8140 	beq.w	80016e4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d005      	beq.n	800147c <HAL_GPIO_Init+0x40>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d017      	beq.n	800151a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d123      	bne.n	800156e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	08da      	lsrs	r2, r3, #3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3208      	adds	r2, #8
 8001568:	6939      	ldr	r1, [r7, #16]
 800156a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0203 	and.w	r2, r3, #3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 809a 	beq.w	80016e4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b0:	4b55      	ldr	r3, [pc, #340]	; (8001708 <HAL_GPIO_Init+0x2cc>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a54      	ldr	r2, [pc, #336]	; (8001708 <HAL_GPIO_Init+0x2cc>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b52      	ldr	r3, [pc, #328]	; (8001708 <HAL_GPIO_Init+0x2cc>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015c8:	4a50      	ldr	r2, [pc, #320]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015f2:	d013      	beq.n	800161c <HAL_GPIO_Init+0x1e0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a46      	ldr	r2, [pc, #280]	; (8001710 <HAL_GPIO_Init+0x2d4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d00d      	beq.n	8001618 <HAL_GPIO_Init+0x1dc>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a45      	ldr	r2, [pc, #276]	; (8001714 <HAL_GPIO_Init+0x2d8>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d007      	beq.n	8001614 <HAL_GPIO_Init+0x1d8>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a44      	ldr	r2, [pc, #272]	; (8001718 <HAL_GPIO_Init+0x2dc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_GPIO_Init+0x1d4>
 800160c:	2303      	movs	r3, #3
 800160e:	e006      	b.n	800161e <HAL_GPIO_Init+0x1e2>
 8001610:	2305      	movs	r3, #5
 8001612:	e004      	b.n	800161e <HAL_GPIO_Init+0x1e2>
 8001614:	2302      	movs	r3, #2
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0x1e2>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_GPIO_Init+0x1e2>
 800161c:	2300      	movs	r3, #0
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	f002 0203 	and.w	r2, r2, #3
 8001624:	0092      	lsls	r2, r2, #2
 8001626:	4093      	lsls	r3, r2
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800162e:	4937      	ldr	r1, [pc, #220]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800163c:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001660:	4a2e      	ldr	r2, [pc, #184]	; (800171c <HAL_GPIO_Init+0x2e0>)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_GPIO_Init+0x2e0>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800168a:	4a24      	ldr	r2, [pc, #144]	; (800171c <HAL_GPIO_Init+0x2e0>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_GPIO_Init+0x2e0>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016b4:	4a19      	ldr	r2, [pc, #100]	; (800171c <HAL_GPIO_Init+0x2e0>)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_GPIO_Init+0x2e0>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016de:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_GPIO_Init+0x2e0>)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3301      	adds	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f47f aea9 	bne.w	800144c <HAL_GPIO_Init+0x10>
  }
}
 80016fa:	bf00      	nop
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000
 8001710:	48000400 	.word	0x48000400
 8001714:	48000800 	.word	0x48000800
 8001718:	48000c00 	.word	0x48000c00
 800171c:	40010400 	.word	0x40010400

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800173c:	e002      	b.n	8001744 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e081      	b.n	8001866 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d106      	bne.n	800177c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fbe4 	bl	8000f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2224      	movs	r2, #36	; 0x24
 8001780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0201 	bic.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	e006      	b.n	80017d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d104      	bne.n	80017ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800180c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691a      	ldr	r2, [r3, #16]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69d9      	ldr	r1, [r3, #28]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1a      	ldr	r2, [r3, #32]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2220      	movs	r2, #32
 8001852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	461a      	mov	r2, r3
 800187e:	4603      	mov	r3, r0
 8001880:	817b      	strh	r3, [r7, #10]
 8001882:	460b      	mov	r3, r1
 8001884:	813b      	strh	r3, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b20      	cmp	r3, #32
 8001894:	f040 80f9 	bne.w	8001a8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HAL_I2C_Mem_Write+0x34>
 800189e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0ed      	b.n	8001a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_I2C_Mem_Write+0x4e>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e0e6      	b.n	8001a8c <HAL_I2C_Mem_Write+0x21c>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018c6:	f7ff fca5 	bl	8001214 <HAL_GetTick>
 80018ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2319      	movs	r3, #25
 80018d2:	2201      	movs	r2, #1
 80018d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 fac3 	bl	8001e64 <I2C_WaitOnFlagUntilTimeout>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0d1      	b.n	8001a8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2221      	movs	r2, #33	; 0x21
 80018ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2240      	movs	r2, #64	; 0x40
 80018f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a3a      	ldr	r2, [r7, #32]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001910:	88f8      	ldrh	r0, [r7, #6]
 8001912:	893a      	ldrh	r2, [r7, #8]
 8001914:	8979      	ldrh	r1, [r7, #10]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4603      	mov	r3, r0
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 f9d3 	bl	8001ccc <I2C_RequestMemoryWrite>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0a9      	b.n	8001a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193c:	b29b      	uxth	r3, r3
 800193e:	2bff      	cmp	r3, #255	; 0xff
 8001940:	d90e      	bls.n	8001960 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	22ff      	movs	r2, #255	; 0xff
 8001946:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194c:	b2da      	uxtb	r2, r3
 800194e:	8979      	ldrh	r1, [r7, #10]
 8001950:	2300      	movs	r3, #0
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 fbb5 	bl	80020c8 <I2C_TransferConfig>
 800195e:	e00f      	b.n	8001980 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001964:	b29a      	uxth	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196e:	b2da      	uxtb	r2, r3
 8001970:	8979      	ldrh	r1, [r7, #10]
 8001972:	2300      	movs	r3, #0
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fba4 	bl	80020c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 faad 	bl	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e07b      	b.n	8001a8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d034      	beq.n	8001a38 <HAL_I2C_Mem_Write+0x1c8>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d130      	bne.n	8001a38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	2200      	movs	r2, #0
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 fa3f 	bl	8001e64 <I2C_WaitOnFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e04d      	b.n	8001a8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2bff      	cmp	r3, #255	; 0xff
 80019f8:	d90e      	bls.n	8001a18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	22ff      	movs	r2, #255	; 0xff
 80019fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	8979      	ldrh	r1, [r7, #10]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 fb59 	bl	80020c8 <I2C_TransferConfig>
 8001a16:	e00f      	b.n	8001a38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	8979      	ldrh	r1, [r7, #10]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 fb48 	bl	80020c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d19e      	bne.n	8001980 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fa8c 	bl	8001f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e01a      	b.n	8001a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_I2C_Mem_Write+0x224>)
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2220      	movs	r2, #32
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a8a:	2302      	movs	r3, #2
  }
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	fe00e800 	.word	0xfe00e800

08001a98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	817b      	strh	r3, [r7, #10]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	813b      	strh	r3, [r7, #8]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	f040 80fd 	bne.w	8001cba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_I2C_Mem_Read+0x34>
 8001ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d105      	bne.n	8001ad8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0f1      	b.n	8001cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_I2C_Mem_Read+0x4e>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e0ea      	b.n	8001cbc <HAL_I2C_Mem_Read+0x224>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001aee:	f7ff fb91 	bl	8001214 <HAL_GetTick>
 8001af2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2319      	movs	r3, #25
 8001afa:	2201      	movs	r2, #1
 8001afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 f9af 	bl	8001e64 <I2C_WaitOnFlagUntilTimeout>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0d5      	b.n	8001cbc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2222      	movs	r2, #34	; 0x22
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2240      	movs	r2, #64	; 0x40
 8001b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a3a      	ldr	r2, [r7, #32]
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b38:	88f8      	ldrh	r0, [r7, #6]
 8001b3a:	893a      	ldrh	r2, [r7, #8]
 8001b3c:	8979      	ldrh	r1, [r7, #10]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	4603      	mov	r3, r0
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f913 	bl	8001d74 <I2C_RequestMemoryRead>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0ad      	b.n	8001cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	2bff      	cmp	r3, #255	; 0xff
 8001b68:	d90e      	bls.n	8001b88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	22ff      	movs	r2, #255	; 0xff
 8001b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	8979      	ldrh	r1, [r7, #10]
 8001b78:	4b52      	ldr	r3, [pc, #328]	; (8001cc4 <HAL_I2C_Mem_Read+0x22c>)
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 faa1 	bl	80020c8 <I2C_TransferConfig>
 8001b86:	e00f      	b.n	8001ba8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	8979      	ldrh	r1, [r7, #10]
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_I2C_Mem_Read+0x22c>)
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fa90 	bl	80020c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f956 	bl	8001e64 <I2C_WaitOnFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e07c      	b.n	8001cbc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d034      	beq.n	8001c68 <HAL_I2C_Mem_Read+0x1d0>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d130      	bne.n	8001c68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f927 	bl	8001e64 <I2C_WaitOnFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e04d      	b.n	8001cbc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2bff      	cmp	r3, #255	; 0xff
 8001c28:	d90e      	bls.n	8001c48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	22ff      	movs	r2, #255	; 0xff
 8001c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	8979      	ldrh	r1, [r7, #10]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 fa41 	bl	80020c8 <I2C_TransferConfig>
 8001c46:	e00f      	b.n	8001c68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	8979      	ldrh	r1, [r7, #10]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fa30 	bl	80020c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d19a      	bne.n	8001ba8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f974 	bl	8001f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e01a      	b.n	8001cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_I2C_Mem_Read+0x230>)
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e000      	b.n	8001cbc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
  }
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	80002400 	.word	0x80002400
 8001cc8:	fe00e800 	.word	0xfe00e800

08001ccc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	817b      	strh	r3, [r7, #10]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	813b      	strh	r3, [r7, #8]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	8979      	ldrh	r1, [r7, #10]
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <I2C_RequestMemoryWrite+0xa4>)
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f9e7 	bl	80020c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	69b9      	ldr	r1, [r7, #24]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f8f0 	bl	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e02c      	b.n	8001d68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d14:	893b      	ldrh	r3, [r7, #8]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
 8001d1e:	e015      	b.n	8001d4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d20:	893b      	ldrh	r3, [r7, #8]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	69b9      	ldr	r1, [r7, #24]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f8d6 	bl	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e012      	b.n	8001d68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d42:	893b      	ldrh	r3, [r7, #8]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2200      	movs	r2, #0
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f884 	bl	8001e64 <I2C_WaitOnFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	80002000 	.word	0x80002000

08001d74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	4608      	mov	r0, r1
 8001d7e:	4611      	mov	r1, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	817b      	strh	r3, [r7, #10]
 8001d86:	460b      	mov	r3, r1
 8001d88:	813b      	strh	r3, [r7, #8]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	8979      	ldrh	r1, [r7, #10]
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <I2C_RequestMemoryRead+0xa4>)
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f994 	bl	80020c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f89d 	bl	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e02c      	b.n	8001e0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d105      	bne.n	8001dc6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dba:	893b      	ldrh	r3, [r7, #8]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8001dc4:	e015      	b.n	8001df2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dc6:	893b      	ldrh	r3, [r7, #8]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	69b9      	ldr	r1, [r7, #24]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f883 	bl	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e012      	b.n	8001e0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001de8:	893b      	ldrh	r3, [r7, #8]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2140      	movs	r1, #64	; 0x40
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f831 	bl	8001e64 <I2C_WaitOnFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	80002000 	.word	0x80002000

08001e1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d103      	bne.n	8001e3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d007      	beq.n	8001e58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	619a      	str	r2, [r3, #24]
  }
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e74:	e022      	b.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d01e      	beq.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7e:	f7ff f9c9 	bl	8001214 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d302      	bcc.n	8001e94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d113      	bne.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	f043 0220 	orr.w	r2, r3, #32
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e00f      	b.n	8001edc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d0cd      	beq.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ef0:	e02c      	b.n	8001f4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f870 	bl	8001fdc <I2C_IsAcknowledgeFailed>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e02a      	b.n	8001f5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d01e      	beq.n	8001f4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0e:	f7ff f981 	bl	8001214 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d302      	bcc.n	8001f24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d113      	bne.n	8001f4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f043 0220 	orr.w	r2, r3, #32
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e007      	b.n	8001f5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d1cb      	bne.n	8001ef2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f70:	e028      	b.n	8001fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f830 	bl	8001fdc <I2C_IsAcknowledgeFailed>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e026      	b.n	8001fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f86:	f7ff f945 	bl	8001214 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d302      	bcc.n	8001f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d113      	bne.n	8001fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa0:	f043 0220 	orr.w	r2, r3, #32
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e007      	b.n	8001fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d1cf      	bne.n	8001f72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d161      	bne.n	80020ba <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002004:	d02b      	beq.n	800205e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002014:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002016:	e022      	b.n	800205e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201e:	d01e      	beq.n	800205e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002020:	f7ff f8f8 	bl	8001214 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	429a      	cmp	r2, r3
 800202e:	d302      	bcc.n	8002036 <I2C_IsAcknowledgeFailed+0x5a>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d113      	bne.n	800205e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f043 0220 	orr.w	r2, r3, #32
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e02e      	b.n	80020bc <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b20      	cmp	r3, #32
 800206a:	d1d5      	bne.n	8002018 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2210      	movs	r2, #16
 8002072:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2220      	movs	r2, #32
 800207a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff fecd 	bl	8001e1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <I2C_IsAcknowledgeFailed+0xe8>)
 800208e:	400b      	ands	r3, r1
 8002090:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f043 0204 	orr.w	r2, r3, #4
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	fe00e800 	.word	0xfe00e800

080020c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	817b      	strh	r3, [r7, #10]
 80020d6:	4613      	mov	r3, r2
 80020d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	0d5b      	lsrs	r3, r3, #21
 80020e4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <I2C_TransferConfig+0x58>)
 80020ea:	430b      	orrs	r3, r1
 80020ec:	43db      	mvns	r3, r3
 80020ee:	ea02 0103 	and.w	r1, r2, r3
 80020f2:	897b      	ldrh	r3, [r7, #10]
 80020f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020f8:	7a7b      	ldrb	r3, [r7, #9]
 80020fa:	041b      	lsls	r3, r3, #16
 80020fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	431a      	orrs	r2, r3
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	431a      	orrs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	03ff63ff 	.word	0x03ff63ff

08002124 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b20      	cmp	r3, #32
 8002138:	d138      	bne.n	80021ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002144:	2302      	movs	r3, #2
 8002146:	e032      	b.n	80021ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2224      	movs	r2, #36	; 0x24
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002176:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6819      	ldr	r1, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
  }
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	d139      	bne.n	8002244 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021da:	2302      	movs	r3, #2
 80021dc:	e033      	b.n	8002246 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2224      	movs	r2, #36	; 0x24
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800220c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	e000      	b.n	8002246 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002244:	2302      	movs	r3, #2
  }
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800225a:	af00      	add	r7, sp, #0
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d102      	bne.n	800226e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	f000 bef4 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 816a 	beq.w	8002552 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800227e:	4bb3      	ldr	r3, [pc, #716]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b04      	cmp	r3, #4
 8002288:	d00c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800228a:	4bb0      	ldr	r3, [pc, #704]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b08      	cmp	r3, #8
 8002294:	d159      	bne.n	800234a <HAL_RCC_OscConfig+0xf6>
 8002296:	4bad      	ldr	r3, [pc, #692]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a2:	d152      	bne.n	800234a <HAL_RCC_OscConfig+0xf6>
 80022a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <HAL_RCC_OscConfig+0x82>
 80022d0:	4b9e      	ldr	r3, [pc, #632]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	e015      	b.n	8002302 <HAL_RCC_OscConfig+0xae>
 80022d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022da:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80022fe:	4b93      	ldr	r3, [pc, #588]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002306:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800230a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800230e:	fa92 f2a2 	rbit	r2, r2
 8002312:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002316:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800231a:	fab2 f282 	clz	r2, r2
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	f042 0220 	orr.w	r2, r2, #32
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	f002 021f 	and.w	r2, r2, #31
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f202 	lsl.w	r2, r1, r2
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 810c 	beq.w	8002550 <HAL_RCC_OscConfig+0x2fc>
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 8106 	bne.w	8002550 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	f000 be86 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d106      	bne.n	8002364 <HAL_RCC_OscConfig+0x110>
 8002356:	4b7d      	ldr	r3, [pc, #500]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7c      	ldr	r2, [pc, #496]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e030      	b.n	80023c6 <HAL_RCC_OscConfig+0x172>
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x134>
 800236e:	4b77      	ldr	r3, [pc, #476]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a76      	ldr	r2, [pc, #472]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b74      	ldr	r3, [pc, #464]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a73      	ldr	r2, [pc, #460]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e01e      	b.n	80023c6 <HAL_RCC_OscConfig+0x172>
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002392:	d10c      	bne.n	80023ae <HAL_RCC_OscConfig+0x15a>
 8002394:	4b6d      	ldr	r3, [pc, #436]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6c      	ldr	r2, [pc, #432]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 800239a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a69      	ldr	r2, [pc, #420]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	e00b      	b.n	80023c6 <HAL_RCC_OscConfig+0x172>
 80023ae:	4b67      	ldr	r3, [pc, #412]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a66      	ldr	r2, [pc, #408]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b64      	ldr	r3, [pc, #400]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a63      	ldr	r2, [pc, #396]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023c6:	4b61      	ldr	r3, [pc, #388]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	f023 020f 	bic.w	r2, r3, #15
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	495d      	ldr	r1, [pc, #372]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d059      	beq.n	8002498 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe ff16 	bl	8001214 <HAL_GetTick>
 80023e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ee:	f7fe ff11 	bl	8001214 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d902      	bls.n	8002404 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	f000 be29 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>
 8002404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002408:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002418:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241c:	fab3 f383 	clz	r3, r3
 8002420:	b2db      	uxtb	r3, r3
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d102      	bne.n	8002436 <HAL_RCC_OscConfig+0x1e2>
 8002430:	4b46      	ldr	r3, [pc, #280]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	e015      	b.n	8002462 <HAL_RCC_OscConfig+0x20e>
 8002436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800244a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002452:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002466:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800246a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800246e:	fa92 f2a2 	rbit	r2, r2
 8002472:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002476:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800247a:	fab2 f282 	clz	r2, r2
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f042 0220 	orr.w	r2, r2, #32
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f002 021f 	and.w	r2, r2, #31
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f202 	lsl.w	r2, r1, r2
 8002490:	4013      	ands	r3, r2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0ab      	beq.n	80023ee <HAL_RCC_OscConfig+0x19a>
 8002496:	e05c      	b.n	8002552 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe febc 	bl	8001214 <HAL_GetTick>
 800249c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a2:	f7fe feb7 	bl	8001214 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d902      	bls.n	80024b8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	f000 bdcf 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>
 80024b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80024cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d102      	bne.n	80024ea <HAL_RCC_OscConfig+0x296>
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x2c2>
 80024ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002502:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002506:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_RCC_OscConfig+0x2f8>)
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800251a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800251e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002522:	fa92 f2a2 	rbit	r2, r2
 8002526:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800252a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800252e:	fab2 f282 	clz	r2, r2
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	f042 0220 	orr.w	r2, r2, #32
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	f002 021f 	and.w	r2, r2, #31
 800253e:	2101      	movs	r1, #1
 8002540:	fa01 f202 	lsl.w	r2, r1, r2
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1ab      	bne.n	80024a2 <HAL_RCC_OscConfig+0x24e>
 800254a:	e002      	b.n	8002552 <HAL_RCC_OscConfig+0x2fe>
 800254c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 816f 	beq.w	8002840 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002562:	4bd0      	ldr	r3, [pc, #832]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800256e:	4bcd      	ldr	r3, [pc, #820]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b08      	cmp	r3, #8
 8002578:	d16c      	bne.n	8002654 <HAL_RCC_OscConfig+0x400>
 800257a:	4bca      	ldr	r3, [pc, #808]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d166      	bne.n	8002654 <HAL_RCC_OscConfig+0x400>
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002598:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_OscConfig+0x362>
 80025b0:	4bbc      	ldr	r3, [pc, #752]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	e013      	b.n	80025de <HAL_RCC_OscConfig+0x38a>
 80025b6:	2302      	movs	r3, #2
 80025b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025c8:	2302      	movs	r3, #2
 80025ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025da:	4bb2      	ldr	r3, [pc, #712]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2202      	movs	r2, #2
 80025e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025e8:	fa92 f2a2 	rbit	r2, r2
 80025ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025f4:	fab2 f282 	clz	r2, r2
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f002 021f 	and.w	r2, r2, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <HAL_RCC_OscConfig+0x3cc>
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d002      	beq.n	8002620 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f000 bd1b 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4ba0      	ldr	r3, [pc, #640]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002628:	1d3b      	adds	r3, r7, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	21f8      	movs	r1, #248	; 0xf8
 8002630:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002638:	fa91 f1a1 	rbit	r1, r1
 800263c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002640:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002644:	fab1 f181 	clz	r1, r1
 8002648:	b2c9      	uxtb	r1, r1
 800264a:	408b      	lsls	r3, r1
 800264c:	4995      	ldr	r1, [pc, #596]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	e0f5      	b.n	8002840 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8085 	beq.w	800276a <HAL_RCC_OscConfig+0x516>
 8002660:	2301      	movs	r3, #1
 8002662:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002672:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002680:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	461a      	mov	r2, r3
 8002688:	2301      	movs	r3, #1
 800268a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fdc2 	bl	8001214 <HAL_GetTick>
 8002690:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	e00a      	b.n	80026ac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002696:	f7fe fdbd 	bl	8001214 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d902      	bls.n	80026ac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	f000 bcd5 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>
 80026ac:	2302      	movs	r3, #2
 80026ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_OscConfig+0x488>
 80026d6:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e013      	b.n	8002704 <HAL_RCC_OscConfig+0x4b0>
 80026dc:	2302      	movs	r3, #2
 80026de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002700:	4b68      	ldr	r3, [pc, #416]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	2202      	movs	r2, #2
 8002706:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800270a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800270e:	fa92 f2a2 	rbit	r2, r2
 8002712:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002716:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800271a:	fab2 f282 	clz	r2, r2
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f042 0220 	orr.w	r2, r2, #32
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f002 021f 	and.w	r2, r2, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f202 	lsl.w	r2, r1, r2
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0af      	beq.n	8002696 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4b5b      	ldr	r3, [pc, #364]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	21f8      	movs	r1, #248	; 0xf8
 8002746:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800274e:	fa91 f1a1 	rbit	r1, r1
 8002752:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002756:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800275a:	fab1 f181 	clz	r1, r1
 800275e:	b2c9      	uxtb	r1, r1
 8002760:	408b      	lsls	r3, r1
 8002762:	4950      	ldr	r1, [pc, #320]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
 8002768:	e06a      	b.n	8002840 <HAL_RCC_OscConfig+0x5ec>
 800276a:	2301      	movs	r3, #1
 800276c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800277c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800278a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	461a      	mov	r2, r3
 8002792:	2300      	movs	r3, #0
 8002794:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7fe fd3d 	bl	8001214 <HAL_GetTick>
 800279a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a0:	f7fe fd38 	bl	8001214 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d902      	bls.n	80027b6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f000 bc50 	b.w	8003056 <HAL_RCC_OscConfig+0xe02>
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d102      	bne.n	80027e6 <HAL_RCC_OscConfig+0x592>
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	e013      	b.n	800280e <HAL_RCC_OscConfig+0x5ba>
 80027e6:	2302      	movs	r3, #2
 80027e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027f8:	2302      	movs	r3, #2
 80027fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800280a:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <HAL_RCC_OscConfig+0x650>)
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2202      	movs	r2, #2
 8002810:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002814:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002818:	fa92 f2a2 	rbit	r2, r2
 800281c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002820:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002824:	fab2 f282 	clz	r2, r2
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	f042 0220 	orr.w	r2, r2, #32
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f002 021f 	and.w	r2, r2, #31
 8002834:	2101      	movs	r1, #1
 8002836:	fa01 f202 	lsl.w	r2, r1, r2
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1af      	bne.n	80027a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80da 	beq.w	8002a04 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d069      	beq.n	800292e <HAL_RCC_OscConfig+0x6da>
 800285a:	2301      	movs	r3, #1
 800285c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800286c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_RCC_OscConfig+0x654>)
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	461a      	mov	r2, r3
 8002880:	2301      	movs	r3, #1
 8002882:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002884:	f7fe fcc6 	bl	8001214 <HAL_GetTick>
 8002888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288c:	e00e      	b.n	80028ac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288e:	f7fe fcc1 	bl	8001214 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d906      	bls.n	80028ac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e3d9      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	10908120 	.word	0x10908120
 80028ac:	2302      	movs	r3, #2
 80028ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028c2:	2202      	movs	r2, #2
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	fa93 f2a3 	rbit	r2, r3
 80028d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028da:	2202      	movs	r2, #2
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80028ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	4ba5      	ldr	r3, [pc, #660]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 80028f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028f6:	2102      	movs	r1, #2
 80028f8:	6019      	str	r1, [r3, #0]
 80028fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fa93 f1a3 	rbit	r1, r3
 8002904:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002908:	6019      	str	r1, [r3, #0]
  return result;
 800290a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0b0      	beq.n	800288e <HAL_RCC_OscConfig+0x63a>
 800292c:	e06a      	b.n	8002a04 <HAL_RCC_OscConfig+0x7b0>
 800292e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	fa93 f2a3 	rbit	r2, r3
 8002940:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002944:	601a      	str	r2, [r3, #0]
  return result;
 8002946:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800294a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800294c:	fab3 f383 	clz	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	4b8c      	ldr	r3, [pc, #560]	; (8002b88 <HAL_RCC_OscConfig+0x934>)
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	461a      	mov	r2, r3
 800295c:	2300      	movs	r3, #0
 800295e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fc58 	bl	8001214 <HAL_GetTick>
 8002964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002968:	e009      	b.n	800297e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296a:	f7fe fc53 	bl	8001214 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e36b      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 800297e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002982:	2202      	movs	r2, #2
 8002984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	fa93 f2a3 	rbit	r2, r3
 8002990:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800299a:	2202      	movs	r2, #2
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	fa93 f2a3 	rbit	r2, r3
 80029a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029b2:	2202      	movs	r2, #2
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	fa93 f2a3 	rbit	r2, r3
 80029c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c6:	4b6f      	ldr	r3, [pc, #444]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 80029c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029ce:	2102      	movs	r1, #2
 80029d0:	6019      	str	r1, [r3, #0]
 80029d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fa93 f1a3 	rbit	r1, r3
 80029dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029e0:	6019      	str	r1, [r3, #0]
  return result;
 80029e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2101      	movs	r1, #1
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1b2      	bne.n	800296a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8158 	beq.w	8002cc4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1a:	4b5a      	ldr	r3, [pc, #360]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d112      	bne.n	8002a4c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b57      	ldr	r3, [pc, #348]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a56      	ldr	r2, [pc, #344]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a3a:	f107 0308 	add.w	r3, r7, #8
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	f107 0308 	add.w	r3, r7, #8
 8002a44:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <HAL_RCC_OscConfig+0x938>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11a      	bne.n	8002a8e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <HAL_RCC_OscConfig+0x938>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a4b      	ldr	r2, [pc, #300]	; (8002b8c <HAL_RCC_OscConfig+0x938>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a64:	f7fe fbd6 	bl	8001214 <HAL_GetTick>
 8002a68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	e009      	b.n	8002a82 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe fbd1 	bl	8001214 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e2e9      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4b42      	ldr	r3, [pc, #264]	; (8002b8c <HAL_RCC_OscConfig+0x938>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0ef      	beq.n	8002a6e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x852>
 8002a98:	4b3a      	ldr	r3, [pc, #232]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4a39      	ldr	r2, [pc, #228]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6213      	str	r3, [r2, #32]
 8002aa4:	e02f      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10c      	bne.n	8002aca <HAL_RCC_OscConfig+0x876>
 8002ab0:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4a33      	ldr	r2, [pc, #204]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4a30      	ldr	r2, [pc, #192]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ac2:	f023 0304 	bic.w	r3, r3, #4
 8002ac6:	6213      	str	r3, [r2, #32]
 8002ac8:	e01d      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCC_OscConfig+0x89a>
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4a2a      	ldr	r2, [pc, #168]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4a27      	ldr	r2, [pc, #156]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6213      	str	r3, [r2, #32]
 8002aec:	e00b      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
 8002aee:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a24      	ldr	r2, [pc, #144]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6213      	str	r3, [r2, #32]
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a21      	ldr	r2, [pc, #132]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d06b      	beq.n	8002be8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7fe fb80 	bl	8001214 <HAL_GetTick>
 8002b14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	e00b      	b.n	8002b32 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1a:	f7fe fb7b 	bl	8001214 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e291      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 8002b32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b36:	2202      	movs	r2, #2
 8002b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	fa93 f2a3 	rbit	r2, r3
 8002b44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b4e:	2202      	movs	r2, #2
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	fa93 f2a3 	rbit	r2, r3
 8002b5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b60:	601a      	str	r2, [r3, #0]
  return result;
 8002b62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d109      	bne.n	8002b90 <HAL_RCC_OscConfig+0x93c>
 8002b7c:	4b01      	ldr	r3, [pc, #4]	; (8002b84 <HAL_RCC_OscConfig+0x930>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	e014      	b.n	8002bac <HAL_RCC_OscConfig+0x958>
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	10908120 	.word	0x10908120
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b94:	2202      	movs	r2, #2
 8002b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	4bbb      	ldr	r3, [pc, #748]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	6011      	str	r1, [r2, #0]
 8002bb4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	fa92 f1a2 	rbit	r1, r2
 8002bbe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bc2:	6011      	str	r1, [r2, #0]
  return result;
 8002bc4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f002 021f 	and.w	r2, r2, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d099      	beq.n	8002b1a <HAL_RCC_OscConfig+0x8c6>
 8002be6:	e063      	b.n	8002cb0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be8:	f7fe fb14 	bl	8001214 <HAL_GetTick>
 8002bec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	e00b      	b.n	8002c0a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fe fb0f 	bl	8001214 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e225      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 8002c0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c0e:	2202      	movs	r2, #2
 8002c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	fa93 f2a3 	rbit	r2, r3
 8002c1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c26:	2202      	movs	r2, #2
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	fa93 f2a3 	rbit	r2, r3
 8002c34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c38:	601a      	str	r2, [r3, #0]
  return result;
 8002c3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d102      	bne.n	8002c5a <HAL_RCC_OscConfig+0xa06>
 8002c54:	4b90      	ldr	r3, [pc, #576]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	e00d      	b.n	8002c76 <HAL_RCC_OscConfig+0xa22>
 8002c5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c5e:	2202      	movs	r2, #2
 8002c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	fa93 f2a3 	rbit	r2, r3
 8002c6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	4b89      	ldr	r3, [pc, #548]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	6011      	str	r1, [r2, #0]
 8002c7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	fa92 f1a2 	rbit	r1, r2
 8002c88:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c8c:	6011      	str	r1, [r2, #0]
  return result;
 8002c8e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	fab2 f282 	clz	r2, r2
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	f002 021f 	and.w	r2, r2, #31
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1a0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb8:	4b77      	ldr	r3, [pc, #476]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	4a76      	ldr	r2, [pc, #472]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 81c2 	beq.w	8003054 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd0:	4b71      	ldr	r3, [pc, #452]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	f000 819c 	beq.w	8003016 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	f040 8114 	bne.w	8002f12 <HAL_RCC_OscConfig+0xcbe>
 8002cea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fa93 f2a3 	rbit	r2, r3
 8002cfe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d02:	601a      	str	r2, [r3, #0]
  return result;
 8002d04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7fe fa78 	bl	8001214 <HAL_GetTick>
 8002d24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d28:	e009      	b.n	8002d3e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7fe fa73 	bl	8001214 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e18b      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 8002d3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	fa93 f2a3 	rbit	r2, r3
 8002d52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d56:	601a      	str	r2, [r3, #0]
  return result;
 8002d58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d102      	bne.n	8002d78 <HAL_RCC_OscConfig+0xb24>
 8002d72:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	e01b      	b.n	8002db0 <HAL_RCC_OscConfig+0xb5c>
 8002d78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	4b3a      	ldr	r3, [pc, #232]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002db4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002db8:	6011      	str	r1, [r2, #0]
 8002dba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	fa92 f1a2 	rbit	r1, r2
 8002dc4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002dc8:	6011      	str	r1, [r2, #0]
  return result;
 8002dca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	fab2 f282 	clz	r2, r2
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f042 0220 	orr.w	r2, r2, #32
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	f002 021f 	and.w	r2, r2, #31
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f202 	lsl.w	r2, r1, r2
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d19e      	bne.n	8002d2a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dec:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	4925      	ldr	r1, [pc, #148]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
 8002e08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e20:	601a      	str	r2, [r3, #0]
  return result;
 8002e22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e26:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe f9e9 	bl	8001214 <HAL_GetTick>
 8002e42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e46:	e009      	b.n	8002e5c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe f9e4 	bl	8001214 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0fc      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 8002e5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	fa93 f2a3 	rbit	r2, r3
 8002e70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e74:	601a      	str	r2, [r3, #0]
  return result;
 8002e76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCC_OscConfig+0xc48>
 8002e90:	4b01      	ldr	r3, [pc, #4]	; (8002e98 <HAL_RCC_OscConfig+0xc44>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	e01e      	b.n	8002ed4 <HAL_RCC_OscConfig+0xc80>
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ea0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	fa93 f2a3 	rbit	r2, r3
 8002eb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	fa93 f2a3 	rbit	r2, r3
 8002eca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	4b63      	ldr	r3, [pc, #396]	; (8003060 <HAL_RCC_OscConfig+0xe0c>)
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ed8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002edc:	6011      	str	r1, [r2, #0]
 8002ede:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	fa92 f1a2 	rbit	r1, r2
 8002ee8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002eec:	6011      	str	r1, [r2, #0]
  return result;
 8002eee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	fab2 f282 	clz	r2, r2
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	f042 0220 	orr.w	r2, r2, #32
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	f002 021f 	and.w	r2, r2, #31
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d09b      	beq.n	8002e48 <HAL_RCC_OscConfig+0xbf4>
 8002f10:	e0a0      	b.n	8003054 <HAL_RCC_OscConfig+0xe00>
 8002f12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	fa93 f2a3 	rbit	r2, r3
 8002f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f2a:	601a      	str	r2, [r3, #0]
  return result;
 8002f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	461a      	mov	r2, r3
 8002f44:	2300      	movs	r3, #0
 8002f46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe f964 	bl	8001214 <HAL_GetTick>
 8002f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f50:	e009      	b.n	8002f66 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe f95f 	bl	8001214 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e077      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
 8002f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7e:	601a      	str	r2, [r3, #0]
  return result;
 8002f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d102      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xd4c>
 8002f9a:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_RCC_OscConfig+0xe0c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	e01b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd84>
 8002fa0:	f107 0320 	add.w	r3, r7, #32
 8002fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f107 0320 	add.w	r3, r7, #32
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	fa93 f2a3 	rbit	r2, r3
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f107 0318 	add.w	r3, r7, #24
 8002fbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f107 0318 	add.w	r3, r7, #24
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	fa93 f2a3 	rbit	r2, r3
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	4b22      	ldr	r3, [pc, #136]	; (8003060 <HAL_RCC_OscConfig+0xe0c>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f107 0210 	add.w	r2, r7, #16
 8002fdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fe0:	6011      	str	r1, [r2, #0]
 8002fe2:	f107 0210 	add.w	r2, r7, #16
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	fa92 f1a2 	rbit	r1, r2
 8002fec:	f107 020c 	add.w	r2, r7, #12
 8002ff0:	6011      	str	r1, [r2, #0]
  return result;
 8002ff2:	f107 020c 	add.w	r2, r7, #12
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	fab2 f282 	clz	r2, r2
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	f042 0220 	orr.w	r2, r2, #32
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	f002 021f 	and.w	r2, r2, #31
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f202 	lsl.w	r2, r1, r2
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d19e      	bne.n	8002f52 <HAL_RCC_OscConfig+0xcfe>
 8003014:	e01e      	b.n	8003054 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e018      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_RCC_OscConfig+0xe0c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800302c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003030:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	429a      	cmp	r2, r3
 800303c:	d108      	bne.n	8003050 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800303e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003042:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000

08003064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b09e      	sub	sp, #120	; 0x78
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e162      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800307c:	4b90      	ldr	r3, [pc, #576]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d910      	bls.n	80030ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b8d      	ldr	r3, [pc, #564]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	498b      	ldr	r1, [pc, #556]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b89      	ldr	r3, [pc, #548]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e14a      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b82      	ldr	r3, [pc, #520]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	497f      	ldr	r1, [pc, #508]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80dc 	beq.w	8003290 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d13c      	bne.n	800315a <HAL_RCC_ClockConfig+0xf6>
 80030e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d102      	bne.n	800310a <HAL_RCC_ClockConfig+0xa6>
 8003104:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	e00f      	b.n	800312a <HAL_RCC_ClockConfig+0xc6>
 800310a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800310e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	667b      	str	r3, [r7, #100]	; 0x64
 8003118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800311c:	663b      	str	r3, [r7, #96]	; 0x60
 800311e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003126:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800312e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003130:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003132:	fa92 f2a2 	rbit	r2, r2
 8003136:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003138:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800313a:	fab2 f282 	clz	r2, r2
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	f042 0220 	orr.w	r2, r2, #32
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	f002 021f 	and.w	r2, r2, #31
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f202 	lsl.w	r2, r1, r2
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d17b      	bne.n	800324e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0f3      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d13c      	bne.n	80031dc <HAL_RCC_ClockConfig+0x178>
 8003162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003166:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HAL_RCC_ClockConfig+0x128>
 8003186:	4b4f      	ldr	r3, [pc, #316]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e00f      	b.n	80031ac <HAL_RCC_ClockConfig+0x148>
 800318c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
 800319a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800319e:	643b      	str	r3, [r7, #64]	; 0x40
 80031a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80031b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b4:	fa92 f2a2 	rbit	r2, r2
 80031b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031bc:	fab2 f282 	clz	r2, r2
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f042 0220 	orr.w	r2, r2, #32
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	f002 021f 	and.w	r2, r2, #31
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f202 	lsl.w	r2, r1, r2
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d13a      	bne.n	800324e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0b2      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
 80031dc:	2302      	movs	r3, #2
 80031de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d102      	bne.n	8003204 <HAL_RCC_ClockConfig+0x1a0>
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	e00d      	b.n	8003220 <HAL_RCC_ClockConfig+0x1bc>
 8003204:	2302      	movs	r3, #2
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
 8003210:	2302      	movs	r3, #2
 8003212:	623b      	str	r3, [r7, #32]
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2202      	movs	r2, #2
 8003222:	61ba      	str	r2, [r7, #24]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	fa92 f2a2 	rbit	r2, r2
 800322a:	617a      	str	r2, [r7, #20]
  return result;
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	fab2 f282 	clz	r2, r2
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	f042 0220 	orr.w	r2, r2, #32
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f002 021f 	and.w	r2, r2, #31
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e079      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	491a      	ldr	r1, [pc, #104]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003260:	f7fd ffd8 	bl	8001214 <HAL_GetTick>
 8003264:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fd ffd4 	bl	8001214 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e061      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_ClockConfig+0x260>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d214      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 0207 	bic.w	r2, r3, #7
 80032a6:	4906      	ldr	r1, [pc, #24]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <HAL_RCC_ClockConfig+0x25c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e040      	b.n	8003342 <HAL_RCC_ClockConfig+0x2de>
 80032c0:	40022000 	.word	0x40022000
 80032c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	491a      	ldr	r1, [pc, #104]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4912      	ldr	r1, [pc, #72]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 8003302:	4313      	orrs	r3, r2
 8003304:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003306:	f000 f829 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800330a:	4601      	mov	r1, r0
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <HAL_RCC_ClockConfig+0x2e8>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003314:	22f0      	movs	r2, #240	; 0xf0
 8003316:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	fa92 f2a2 	rbit	r2, r2
 800331e:	60fa      	str	r2, [r7, #12]
  return result;
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	fab2 f282 	clz	r2, r2
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	40d3      	lsrs	r3, r2
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x2ec>)
 800332c:	5cd3      	ldrb	r3, [r2, r3]
 800332e:	fa21 f303 	lsr.w	r3, r1, r3
 8003332:	4a08      	ldr	r2, [pc, #32]	; (8003354 <HAL_RCC_ClockConfig+0x2f0>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RCC_ClockConfig+0x2f4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd ff26 	bl	800118c <HAL_InitTick>
  
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3778      	adds	r7, #120	; 0x78
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
 8003350:	08003f4c 	.word	0x08003f4c
 8003354:	20000000 	.word	0x20000000
 8003358:	20000004 	.word	0x20000004

0800335c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b08b      	sub	sp, #44	; 0x2c
 8003360:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003376:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b04      	cmp	r3, #4
 8003384:	d002      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x30>
 8003386:	2b08      	cmp	r3, #8
 8003388:	d003      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0x36>
 800338a:	e03c      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800338c:	4b24      	ldr	r3, [pc, #144]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc4>)
 800338e:	623b      	str	r3, [r7, #32]
      break;
 8003390:	e03c      	b.n	800340c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003398:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800339c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	fa92 f2a2 	rbit	r2, r2
 80033a4:	607a      	str	r2, [r7, #4]
  return result;
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	fab2 f282 	clz	r2, r2
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	40d3      	lsrs	r3, r2
 80033b0:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033b2:	5cd3      	ldrb	r3, [r2, r3]
 80033b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	220f      	movs	r2, #15
 80033c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	fa92 f2a2 	rbit	r2, r2
 80033c8:	60fa      	str	r2, [r7, #12]
  return result;
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	40d3      	lsrs	r3, r2
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033e4:	4a0e      	ldr	r2, [pc, #56]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
 80033f4:	e004      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	4a0c      	ldr	r2, [pc, #48]	; (800342c <HAL_RCC_GetSysClockFreq+0xd0>)
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	623b      	str	r3, [r7, #32]
      break;
 8003404:	e002      	b.n	800340c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003408:	623b      	str	r3, [r7, #32]
      break;
 800340a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340c:	6a3b      	ldr	r3, [r7, #32]
}
 800340e:	4618      	mov	r0, r3
 8003410:	372c      	adds	r7, #44	; 0x2c
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	007a1200 	.word	0x007a1200
 8003424:	08003f64 	.word	0x08003f64
 8003428:	08003f74 	.word	0x08003f74
 800342c:	003d0900 	.word	0x003d0900

08003430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_RCC_GetHCLKFreq+0x14>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000000 	.word	0x20000000

08003448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800344e:	f7ff ffef 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 8003452:	4601      	mov	r1, r0
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800345c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003460:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	fa92 f2a2 	rbit	r2, r2
 8003468:	603a      	str	r2, [r7, #0]
  return result;
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	fab2 f282 	clz	r2, r2
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	40d3      	lsrs	r3, r2
 8003474:	4a04      	ldr	r2, [pc, #16]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003476:	5cd3      	ldrb	r3, [r2, r3]
 8003478:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021000 	.word	0x40021000
 8003488:	08003f5c 	.word	0x08003f5c

0800348c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003492:	f7ff ffcd 	bl	8003430 <HAL_RCC_GetHCLKFreq>
 8003496:	4601      	mov	r1, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	fa92 f2a2 	rbit	r2, r2
 80034ac:	603a      	str	r2, [r7, #0]
  return result;
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	fab2 f282 	clz	r2, r2
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	40d3      	lsrs	r3, r2
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08003f5c 	.word	0x08003f5c

080034d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b092      	sub	sp, #72	; 0x48
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80cd 	beq.w	800368e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f4:	4b8e      	ldr	r3, [pc, #568]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10e      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003500:	4b8b      	ldr	r3, [pc, #556]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	4a8a      	ldr	r2, [pc, #552]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350a:	61d3      	str	r3, [r2, #28]
 800350c:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	4b85      	ldr	r3, [pc, #532]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d118      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352a:	4b82      	ldr	r3, [pc, #520]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a81      	ldr	r2, [pc, #516]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003534:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003536:	f7fd fe6d 	bl	8001214 <HAL_GetTick>
 800353a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	e008      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353e:	f7fd fe69 	bl	8001214 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b64      	cmp	r3, #100	; 0x64
 800354a:	d901      	bls.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e0ea      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	4b78      	ldr	r3, [pc, #480]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800355c:	4b74      	ldr	r3, [pc, #464]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003564:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d07d      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003576:	429a      	cmp	r2, r3
 8003578:	d076      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800357a:	4b6d      	ldr	r3, [pc, #436]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003588:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003594:	fab3 f383 	clz	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	4b66      	ldr	r3, [pc, #408]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	461a      	mov	r2, r3
 80035a4:	2301      	movs	r3, #1
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	4b5d      	ldr	r3, [pc, #372]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	461a      	mov	r2, r3
 80035c8:	2300      	movs	r3, #0
 80035ca:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035cc:	4a58      	ldr	r2, [pc, #352]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d045      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fd fe1a 	bl	8001214 <HAL_GetTick>
 80035e0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e2:	e00a      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e4:	f7fd fe16 	bl	8001214 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e095      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80035fa:	2302      	movs	r3, #2
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
 8003606:	2302      	movs	r3, #2
 8003608:	623b      	str	r3, [r7, #32]
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	61fb      	str	r3, [r7, #28]
  return result;
 8003612:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	b2db      	uxtb	r3, r3
 800361e:	f043 0302 	orr.w	r3, r3, #2
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d102      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003628:	4b41      	ldr	r3, [pc, #260]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	e007      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800362e:	2302      	movs	r3, #2
 8003630:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	4b3d      	ldr	r3, [pc, #244]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2202      	movs	r2, #2
 8003640:	613a      	str	r2, [r7, #16]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	fa92 f2a2 	rbit	r2, r2
 8003648:	60fa      	str	r2, [r7, #12]
  return result;
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	fab2 f282 	clz	r2, r2
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	f002 021f 	and.w	r2, r2, #31
 800365c:	2101      	movs	r1, #1
 800365e:	fa01 f202 	lsl.w	r2, r1, r2
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0bd      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003668:	4b31      	ldr	r3, [pc, #196]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	492e      	ldr	r1, [pc, #184]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003676:	4313      	orrs	r3, r2
 8003678:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800367a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003682:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800369a:	4b25      	ldr	r3, [pc, #148]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f023 0203 	bic.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	4922      	ldr	r1, [pc, #136]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036b8:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	f023 0210 	bic.w	r2, r3, #16
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	491a      	ldr	r1, [pc, #104]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036d6:	4b16      	ldr	r3, [pc, #88]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	4913      	ldr	r1, [pc, #76]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036f4:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	490b      	ldr	r1, [pc, #44]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	4313      	orrs	r3, r2
 8003704:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003720:	4313      	orrs	r3, r2
 8003722:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3748      	adds	r7, #72	; 0x48
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
 8003734:	40007000 	.word	0x40007000
 8003738:	10908100 	.word	0x10908100

0800373c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e040      	b.n	80037d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd fc52 	bl	8001008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2224      	movs	r2, #36	; 0x24
 8003768:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f8c0 	bl	8003900 <UART_SetConfig>
 8003780:	4603      	mov	r3, r0
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e022      	b.n	80037d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f9ec 	bl	8003b70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fa73 	bl	8003cb4 <UART_CheckIdleState>
 80037ce:	4603      	mov	r3, r0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	f040 8082 	bne.w	80038f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_UART_Transmit+0x26>
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e07a      	b.n	80038f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_UART_Transmit+0x38>
 800380c:	2302      	movs	r3, #2
 800380e:	e073      	b.n	80038f8 <HAL_UART_Transmit+0x120>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2221      	movs	r2, #33	; 0x21
 8003824:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003826:	f7fd fcf5 	bl	8001214 <HAL_GetTick>
 800382a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	88fa      	ldrh	r2, [r7, #6]
 8003830:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003844:	d108      	bne.n	8003858 <HAL_UART_Transmit+0x80>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d104      	bne.n	8003858 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	e003      	b.n	8003860 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800385c:	2300      	movs	r3, #0
 800385e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003868:	e02d      	b.n	80038c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	2180      	movs	r1, #128	; 0x80
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fa66 	bl	8003d46 <UART_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e039      	b.n	80038f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	881a      	ldrh	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003896:	b292      	uxth	r2, r2
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	3302      	adds	r3, #2
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	e008      	b.n	80038b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	781a      	ldrb	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	b292      	uxth	r2, r2
 80038ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3301      	adds	r3, #1
 80038b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1cb      	bne.n	800386a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	2140      	movs	r1, #64	; 0x40
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fa32 	bl	8003d46 <UART_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e005      	b.n	80038f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e000      	b.n	80038f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
  }
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4b8b      	ldr	r3, [pc, #556]	; (8003b58 <UART_SetConfig+0x258>)
 800392c:	4013      	ands	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	6979      	ldr	r1, [r7, #20]
 8003934:	430b      	orrs	r3, r1
 8003936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	430a      	orrs	r2, r1
 8003970:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a79      	ldr	r2, [pc, #484]	; (8003b5c <UART_SetConfig+0x25c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d121      	bne.n	80039c0 <UART_SetConfig+0xc0>
 800397c:	4b78      	ldr	r3, [pc, #480]	; (8003b60 <UART_SetConfig+0x260>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b03      	cmp	r3, #3
 8003986:	d817      	bhi.n	80039b8 <UART_SetConfig+0xb8>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <UART_SetConfig+0x90>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039a1 	.word	0x080039a1
 8003994:	080039ad 	.word	0x080039ad
 8003998:	080039b3 	.word	0x080039b3
 800399c:	080039a7 	.word	0x080039a7
 80039a0:	2300      	movs	r3, #0
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e01e      	b.n	80039e4 <UART_SetConfig+0xe4>
 80039a6:	2302      	movs	r3, #2
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e01b      	b.n	80039e4 <UART_SetConfig+0xe4>
 80039ac:	2304      	movs	r3, #4
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e018      	b.n	80039e4 <UART_SetConfig+0xe4>
 80039b2:	2308      	movs	r3, #8
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	e015      	b.n	80039e4 <UART_SetConfig+0xe4>
 80039b8:	2310      	movs	r3, #16
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	bf00      	nop
 80039be:	e011      	b.n	80039e4 <UART_SetConfig+0xe4>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a67      	ldr	r2, [pc, #412]	; (8003b64 <UART_SetConfig+0x264>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d102      	bne.n	80039d0 <UART_SetConfig+0xd0>
 80039ca:	2300      	movs	r3, #0
 80039cc:	77fb      	strb	r3, [r7, #31]
 80039ce:	e009      	b.n	80039e4 <UART_SetConfig+0xe4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a64      	ldr	r2, [pc, #400]	; (8003b68 <UART_SetConfig+0x268>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d102      	bne.n	80039e0 <UART_SetConfig+0xe0>
 80039da:	2300      	movs	r3, #0
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e001      	b.n	80039e4 <UART_SetConfig+0xe4>
 80039e0:	2310      	movs	r3, #16
 80039e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ec:	d15c      	bne.n	8003aa8 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 80039ee:	7ffb      	ldrb	r3, [r7, #31]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d828      	bhi.n	8003a46 <UART_SetConfig+0x146>
 80039f4:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <UART_SetConfig+0xfc>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a21 	.word	0x08003a21
 8003a00:	08003a29 	.word	0x08003a29
 8003a04:	08003a31 	.word	0x08003a31
 8003a08:	08003a47 	.word	0x08003a47
 8003a0c:	08003a37 	.word	0x08003a37
 8003a10:	08003a47 	.word	0x08003a47
 8003a14:	08003a47 	.word	0x08003a47
 8003a18:	08003a47 	.word	0x08003a47
 8003a1c:	08003a3f 	.word	0x08003a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a20:	f7ff fd12 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 8003a24:	61b8      	str	r0, [r7, #24]
        break;
 8003a26:	e013      	b.n	8003a50 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a28:	f7ff fd30 	bl	800348c <HAL_RCC_GetPCLK2Freq>
 8003a2c:	61b8      	str	r0, [r7, #24]
        break;
 8003a2e:	e00f      	b.n	8003a50 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a30:	4b4e      	ldr	r3, [pc, #312]	; (8003b6c <UART_SetConfig+0x26c>)
 8003a32:	61bb      	str	r3, [r7, #24]
        break;
 8003a34:	e00c      	b.n	8003a50 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a36:	f7ff fc91 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8003a3a:	61b8      	str	r0, [r7, #24]
        break;
 8003a3c:	e008      	b.n	8003a50 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a42:	61bb      	str	r3, [r7, #24]
        break;
 8003a44:	e004      	b.n	8003a50 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	77bb      	strb	r3, [r7, #30]
        break;
 8003a4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d074      	beq.n	8003b40 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	005a      	lsls	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	441a      	add	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b0f      	cmp	r3, #15
 8003a72:	d916      	bls.n	8003aa2 <UART_SetConfig+0x1a2>
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7a:	d212      	bcs.n	8003aa2 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f023 030f 	bic.w	r3, r3, #15
 8003a84:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	89fb      	ldrh	r3, [r7, #14]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	89fa      	ldrh	r2, [r7, #14]
 8003a9e:	60da      	str	r2, [r3, #12]
 8003aa0:	e04e      	b.n	8003b40 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	77bb      	strb	r3, [r7, #30]
 8003aa6:	e04b      	b.n	8003b40 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aa8:	7ffb      	ldrb	r3, [r7, #31]
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d827      	bhi.n	8003afe <UART_SetConfig+0x1fe>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <UART_SetConfig+0x1b4>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ad9 	.word	0x08003ad9
 8003ab8:	08003ae1 	.word	0x08003ae1
 8003abc:	08003ae9 	.word	0x08003ae9
 8003ac0:	08003aff 	.word	0x08003aff
 8003ac4:	08003aef 	.word	0x08003aef
 8003ac8:	08003aff 	.word	0x08003aff
 8003acc:	08003aff 	.word	0x08003aff
 8003ad0:	08003aff 	.word	0x08003aff
 8003ad4:	08003af7 	.word	0x08003af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad8:	f7ff fcb6 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 8003adc:	61b8      	str	r0, [r7, #24]
        break;
 8003ade:	e013      	b.n	8003b08 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae0:	f7ff fcd4 	bl	800348c <HAL_RCC_GetPCLK2Freq>
 8003ae4:	61b8      	str	r0, [r7, #24]
        break;
 8003ae6:	e00f      	b.n	8003b08 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae8:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <UART_SetConfig+0x26c>)
 8003aea:	61bb      	str	r3, [r7, #24]
        break;
 8003aec:	e00c      	b.n	8003b08 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aee:	f7ff fc35 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8003af2:	61b8      	str	r0, [r7, #24]
        break;
 8003af4:	e008      	b.n	8003b08 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003afa:	61bb      	str	r3, [r7, #24]
        break;
 8003afc:	e004      	b.n	8003b08 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	77bb      	strb	r3, [r7, #30]
        break;
 8003b06:	bf00      	nop
    }

    if (pclk != 0U)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d018      	beq.n	8003b40 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	085a      	lsrs	r2, r3, #1
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	441a      	add	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	d908      	bls.n	8003b3c <UART_SetConfig+0x23c>
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b30:	d204      	bcs.n	8003b3c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	e001      	b.n	8003b40 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	efff69f3 	.word	0xefff69f3
 8003b5c:	40013800 	.word	0x40013800
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40004400 	.word	0x40004400
 8003b68:	40004800 	.word	0x40004800
 8003b6c:	007a1200 	.word	0x007a1200

08003b70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01a      	beq.n	8003c86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6e:	d10a      	bne.n	8003c86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	605a      	str	r2, [r3, #4]
  }
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cc4:	f7fd faa6 	bl	8001214 <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d10e      	bne.n	8003cf6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f82d 	bl	8003d46 <UART_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e023      	b.n	8003d3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d10e      	bne.n	8003d22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f817 	bl	8003d46 <UART_WaitOnFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e00d      	b.n	8003d3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b09c      	sub	sp, #112	; 0x70
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	4613      	mov	r3, r2
 8003d54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d56:	e0a5      	b.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	f000 80a1 	beq.w	8003ea4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d62:	f7fd fa57 	bl	8001214 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d13e      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e6      	bne.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3308      	adds	r3, #8
 8003db0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dca:	64ba      	str	r2, [r7, #72]	; 0x48
 8003dcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e5      	bne.n	8003daa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e067      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d04f      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e12:	d147      	bne.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e6      	bne.n	8003e1e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e70:	623a      	str	r2, [r7, #32]
 8003e72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	69f9      	ldr	r1, [r7, #28]
 8003e76:	6a3a      	ldr	r2, [r7, #32]
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e5      	bne.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e010      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69da      	ldr	r2, [r3, #28]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4013      	ands	r3, r2
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	f43f af4a 	beq.w	8003d58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3770      	adds	r7, #112	; 0x70
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <__libc_init_array>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	4e0d      	ldr	r6, [pc, #52]	; (8003f08 <__libc_init_array+0x38>)
 8003ed4:	4c0d      	ldr	r4, [pc, #52]	; (8003f0c <__libc_init_array+0x3c>)
 8003ed6:	1ba4      	subs	r4, r4, r6
 8003ed8:	10a4      	asrs	r4, r4, #2
 8003eda:	2500      	movs	r5, #0
 8003edc:	42a5      	cmp	r5, r4
 8003ede:	d109      	bne.n	8003ef4 <__libc_init_array+0x24>
 8003ee0:	4e0b      	ldr	r6, [pc, #44]	; (8003f10 <__libc_init_array+0x40>)
 8003ee2:	4c0c      	ldr	r4, [pc, #48]	; (8003f14 <__libc_init_array+0x44>)
 8003ee4:	f000 f820 	bl	8003f28 <_init>
 8003ee8:	1ba4      	subs	r4, r4, r6
 8003eea:	10a4      	asrs	r4, r4, #2
 8003eec:	2500      	movs	r5, #0
 8003eee:	42a5      	cmp	r5, r4
 8003ef0:	d105      	bne.n	8003efe <__libc_init_array+0x2e>
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ef8:	4798      	blx	r3
 8003efa:	3501      	adds	r5, #1
 8003efc:	e7ee      	b.n	8003edc <__libc_init_array+0xc>
 8003efe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f02:	4798      	blx	r3
 8003f04:	3501      	adds	r5, #1
 8003f06:	e7f2      	b.n	8003eee <__libc_init_array+0x1e>
 8003f08:	08003f84 	.word	0x08003f84
 8003f0c:	08003f84 	.word	0x08003f84
 8003f10:	08003f84 	.word	0x08003f84
 8003f14:	08003f88 	.word	0x08003f88

08003f18 <memset>:
 8003f18:	4402      	add	r2, r0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d100      	bne.n	8003f22 <memset+0xa>
 8003f20:	4770      	bx	lr
 8003f22:	f803 1b01 	strb.w	r1, [r3], #1
 8003f26:	e7f9      	b.n	8003f1c <memset+0x4>

08003f28 <_init>:
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	bf00      	nop
 8003f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2e:	bc08      	pop	{r3}
 8003f30:	469e      	mov	lr, r3
 8003f32:	4770      	bx	lr

08003f34 <_fini>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	bf00      	nop
 8003f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3a:	bc08      	pop	{r3}
 8003f3c:	469e      	mov	lr, r3
 8003f3e:	4770      	bx	lr
